mean(firstConsonant$Familiarity)
mean(firstVowel$Familiarity)
hist(firstConsonant$Familiarity)
hist(firstVowel$Familiarity)
# prije testiranja t-testom trebamo zaključiti jesu li varijance jednake u oba slučaja
var.test(firstConsonant$Familiarity, firstVowel$Familiarity)
t.test(firstVowel$Familiarity, firstConsonant$Familiarity, alt = "two.sided", var.equal = TRUE)
require(BSDA, quietly = TRUE)
verb_familiarity = english[english$WordCategory == "V", ]$Familiarity
noun_familiarity = english[english$WordCategory == "N", ]$Familiarity
verb_sd = sd(english[english$WordCategory == "V", ]$Familiarity)
noun_sd = sd(english[english$WordCategory == "N", ]$Familiarity)
z.test(verb_familiarity, y = noun_familiarity, alternative = "greater", sigma.x = verb_sd, sigma.y = noun_sd)
z.test(noun_familiarity, y = verb_familiarity, alternative = "greater", sigma.x = noun_sd, sigma.y = verb_sd)
chisq.test(english$WrittenFrequency, english$LengthInLetters, simulate.p.value = TRUE)
model1 = glm(WordCategory ~ RTlexdec + RTnaming, data = english, family = binomial())
summary(model1)
model2 = glm(WordCategory ~ RTlexdec, data = english, family = binomial())
summary(model2)
anova(model1, model2, test= "LRT")
model3 = glm(WordCategory ~ RTnaming, data = english, family = binomial())
summary(model3)
anova(model1, model3, test = "LRT")
test1 = english[5,]
p1 = predict(model1, test1, type = "response")
p2 = predict(model2, test1, type = "response")
p3 = predict(model3, test1, type = "response")
test2 = english[18,]
p4 = predict(model1, test2, type = "response")
p5 = predict(model2, test2, type = "response")
p6 = predict(model3, test2, type = "response")
odds1 = p1/(1-p1)
odds2 = p4/(1-p4)
setwd("~/FER/6. semestar/SAP/projekt/sap")
knitr::opts_chunk$set(echo = TRUE)
require(languageR, quietly = TRUE)
data(english)
#summary(english)
summary(english$AgeSubject)
plot(english$WordCategory)
#head(english)
young = english[english$AgeSubject == "young", ] # mladi
old = english[english$AgeSubject == "old", ] # stari
# vrijeme potrebno mlađima za rješavanje prvog zadatka
RTlexdec_young = young[, "RTlexdec"]
# vrijeme potrebno starijima za rješavanje prvog zadatka
RTlexdec_old = old[, "RTlexdec"]
# vrijeme potrebno mlađima za rješavanje drugog zadatka
RTnaming_young = young[, "RTnaming"]
# vrijeme potrebno starijima za rješavanje drugog zadatka
RTnaming_old = old[, "RTnaming"]
plot(RTlexdec_young, col = 'blue',
ylim = c(min(english$RTlexdec), max(english$RTlexdec)),
ylab = "Vrijeme za prvi zadatak")
points(RTlexdec_old, col='red')
plot(RTnaming_young, col = 'blue',
ylim = c(min(english$RTnaming), max(english$RTnaming)),
ylab = "Vrijeme za drugi zadatak")
points(RTnaming_old, col='red')
# testiranje jednakosti varijance prije t-testa
var.test(RTlexdec_young, RTlexdec_old)
t.test(RTlexdec_young, RTlexdec_old, alt = "two.sided", var.equal = TRUE)
cor(english$Familiarity, english$WrittenFrequency)
plot(english$Familiarity, english$WrittenFrequency)
firstVowel = english[english$CV == "V",] #riječi koje počinju sa samoglasnikom
firstConsonant = english[english$CV == "C",] # riječi koje počinju sa suglasnikom
mean(firstConsonant$Familiarity)
mean(firstVowel$Familiarity)
hist(firstConsonant$Familiarity)
hist(firstVowel$Familiarity)
# prije testiranja t-testom trebamo zaključiti jesu li varijance jednake u oba slučaja
var.test(firstConsonant$Familiarity, firstVowel$Familiarity)
t.test(firstVowel$Familiarity, firstConsonant$Familiarity, alt = "two.sided", var.equal = TRUE)
require(BSDA, quietly = TRUE)
verb_familiarity = english[english$WordCategory == "V", ]$Familiarity
noun_familiarity = english[english$WordCategory == "N", ]$Familiarity
verb_sd = sd(english[english$WordCategory == "V", ]$Familiarity)
noun_sd = sd(english[english$WordCategory == "N", ]$Familiarity)
z.test(verb_familiarity, y = noun_familiarity, alternative = "greater", sigma.x = verb_sd, sigma.y = noun_sd)
z.test(noun_familiarity, y = verb_familiarity, alternative = "greater", sigma.x = noun_sd, sigma.y = verb_sd)
chisq.test(english$WrittenFrequency, english$LengthInLetters, simulate.p.value = TRUE)
model1 = glm(WordCategory ~ RTlexdec + RTnaming, data = english, family = binomial())
summary(model1)
model2 = glm(WordCategory ~ RTlexdec, data = english, family = binomial())
summary(model2)
anova(model1, model2, test= "LRT")
model3 = glm(WordCategory ~ RTnaming, data = english, family = binomial())
summary(model3)
anova(model1, model3, test = "LRT")
test1 = english[5,]
p1 = predict(model1, test1, type = "response")
p2 = predict(model2, test1, type = "response")
p3 = predict(model3, test1, type = "response")
test2 = english[18,]
p4 = predict(model1, test2, type = "response")
p5 = predict(model2, test2, type = "response")
p6 = predict(model3, test2, type = "response")
odds1 = p1/(1-p1)
odds2 = p4/(1-p4)
t.test(RTlexdec_young, RTlexdec_old, alt = "greater", var.equal = TRUE)
cor(english$WrittenFrequency, english$FamilySize)
plor(english$WrittenFrequency, english$FamilySize)
plot(english$WrittenFrequency, english$FamilySize)
cor(english$WrittenFrequency, english$FamilySize)
cor(english$LengthInLetters english$FamilySize)
cor(english$LengthInLetters, english$FamilySize)
plot(english$LengthInLetters, english$FamilySize)
summary(english)
head(english)
english
summary(english$WordCategory)
test1
test2
summary(english$WordCategory)
test1
test2
test2 = english[19,]
test2
test2 = english[,]
test2 = english[1287,]
test2
test2 = english[1587,]
odds2 = p4/(1-p4)
test2
test2 = english[1588,]
test2
test2 = english[2805,]
test2
test2 = english[3505,]
test2
test1 = english[5,]
p1 = predict(model1, test1, type = "response")
p2 = predict(model2, test1, type = "response")
p3 = predict(model3, test1, type = "response")
test2 = english[3505,]
p4 = predict(model1, test2, type = "response")
p5 = predict(model2, test2, type = "response")
p6 = predict(model3, test2, type = "response")
odds1 = p1/(1-p1)
odds2 = p4/(1-p4)
test2
help("predict")
knitr::opts_chunk$set(echo = TRUE)
require(languageR, quietly = TRUE)
data(english)
#summary(english)
summary(english$AgeSubject)
plot(english$WordCategory)
#head(english)
young = english[english$AgeSubject == "young", ] # mladi
old = english[english$AgeSubject == "old", ] # stari
# vrijeme potrebno mlađima za rješavanje prvog zadatka
RTlexdec_young = young[, "RTlexdec"]
# vrijeme potrebno starijima za rješavanje prvog zadatka
RTlexdec_old = old[, "RTlexdec"]
# vrijeme potrebno mlađima za rješavanje drugog zadatka
RTnaming_young = young[, "RTnaming"]
# vrijeme potrebno starijima za rješavanje drugog zadatka
RTnaming_old = old[, "RTnaming"]
plot(RTlexdec_young, col = 'blue',
ylim = c(min(english$RTlexdec), max(english$RTlexdec)),
ylab = "Vrijeme za prvi zadatak")
points(RTlexdec_old, col='red')
plot(RTnaming_young, col = 'blue',
ylim = c(min(english$RTnaming), max(english$RTnaming)),
ylab = "Vrijeme za drugi zadatak")
points(RTnaming_old, col='red')
# testiranje jednakosti varijance prije t-testa
var.test(RTlexdec_young, RTlexdec_old)
t.test(RTlexdec_young, RTlexdec_old, alt = "two.sided", var.equal = TRUE)
cor(english$Familiarity, english$WrittenFrequency)
plot(english$Familiarity, english$WrittenFrequency)
firstVowel = english[english$CV == "V",] #riječi koje počinju sa samoglasnikom
firstConsonant = english[english$CV == "C",] # riječi koje počinju sa suglasnikom
mean(firstConsonant$Familiarity)
mean(firstVowel$Familiarity)
hist(firstConsonant$Familiarity)
hist(firstVowel$Familiarity)
# prije testiranja t-testom trebamo zaključiti jesu li varijance jednake u oba slučaja
var.test(firstConsonant$Familiarity, firstVowel$Familiarity)
t.test(firstVowel$Familiarity, firstConsonant$Familiarity, alt = "two.sided", var.equal = TRUE)
require(BSDA, quietly = TRUE)
verb_familiarity = english[english$WordCategory == "V", ]$Familiarity
noun_familiarity = english[english$WordCategory == "N", ]$Familiarity
verb_sd = sd(english[english$WordCategory == "V", ]$Familiarity)
noun_sd = sd(english[english$WordCategory == "N", ]$Familiarity)
z.test(verb_familiarity, y = noun_familiarity, alternative = "greater", sigma.x = verb_sd, sigma.y = noun_sd)
z.test(noun_familiarity, y = verb_familiarity, alternative = "greater", sigma.x = noun_sd, sigma.y = verb_sd)
chisq.test(english$WrittenFrequency, english$LengthInLetters, simulate.p.value = TRUE)
model1 = glm(WordCategory ~ RTlexdec + RTnaming, data = english, family = binomial())
summary(model1)
model2 = glm(WordCategory ~ RTlexdec, data = english, family = binomial())
summary(model2)
anova(model1, model2, test= "LRT")
model3 = glm(WordCategory ~ RTnaming, data = english, family = binomial())
summary(model3)
anova(model1, model3, test = "LRT")
test1 = english[5,]
p1 = predict(model1, test1, type = "response")
p2 = predict(model2, test1, type = "response")
p3 = predict(model3, test1, type = "response")
test2 = english[3505,]
p4 = predict(model1, test2, type = "response")
p5 = predict(model2, test2, type = "response")
p6 = predict(model3, test2, type = "response")
odds1 = p1/(1-p1)
odds2 = p4/(1-p4)
test2
help(predict.glm)
p4 = predict(model1, test2)
test1 = english[5,]
p1 = predict(model1, test1)
p2 = predict(model2, test1)
p3 = predict(model3, test1)
test2 = english[3505,]
p4 = predict(model1, test2)
p5 = predict(model2, test2)
p6 = predict(model3, test2)
odds1 = p1/(1-p1)
odds2 = p4/(1-p4)
test1 = english[5,]
p1 = predict(model1, test1, type = "response")
p2 = predict(model2, test1, type = "response")
p3 = predict(model3, test1, type = "response")
test2 = english[2805,]
p4 = predict(model1, test2, type = "response")
p5 = predict(model2, test2, type = "response")
p6 = predict(model3, test2, type = "response")
odds1 = p1/(1-p1)
odds2 = p4/(1-p4)
test2
test2 = english[2855,]
test2
test2 = english[3055,]
test2
test1 = english[5,]
p1 = predict(model1, test1, type = "response")
p2 = predict(model2, test1, type = "response")
p3 = predict(model3, test1, type = "response")
test2 = english[3055,]
p4 = predict(model1, test2, type = "response")
p5 = predict(model2, test2, type = "response")
p6 = predict(model3, test2, type = "response")
odds1 = p1/(1-p1)
odds2 = p4/(1-p4)
test2
test1 = english[5,]
p1 = predict(model1, test1, type = "response")
p2 = predict(model2, test1, type = "response")
p3 = predict(model3, test1, type = "response")
test2 = english[3055,]
p4 = predict(model1, test2, type = "response")
p5 = predict(model2, test2, type = "response")
p6 = predict(model3, test2, type = "response")
odds1 = p1/(1-p1)
odds2 = p4/(1-p4)
p6 = predict(model3, test2, type = "terms")
response
p6 = predict(model3, test2, type = "response")
test1
test2
test1 = english[5,]
p1 = predict(model1, test1, type = "response")
p2 = predict(model2, test1, type = "response")
p3 = predict(model3, test1, type = "response")
test2 = english[3055,]
p4 = predict(model1, test2, type = "response")
p5 = predict(model2, test2, type = "response")
p6 = predict(model3, test2, type = "response")
odds1 = p1/(1-p1)
odds2 = p4/(1-p4)
setwd("~/FER/6. semestar/SAP/projekt/sap")
knitr::opts_chunk$set(echo = TRUE)
sigmoid = function(x) {
1 / (1 + exp(-x))
}
x <- seq(-5, 5, 0.01)
plot(x,sigmoid(x))
data("plasma", package = "HSAUR")
plasma
logreg1 = glm(ESR ~ fibrinogen, data = plasma, family = binomial())
summary(logreg1)
podatak = plasma[5,]
podatak
predict(logreg1, podatak, type = "response")
logreg2 = glm(ESR ~ fibrinogen + globulin, data = plasma, family = binomial())
summary(logreg2)
anova(logreg1, logreg2, test = "LRT")
# vaš kod ovdje
#1
data("mtcars")
m1 = glm(am ~ mpg + wt, data = mtcars, family = binomial())
summary(m1)
#2
p7 = predict(m1, mtcars[7,], type="response")
p7
#3
p7/(1-p7)
#4 šansa bi se pomnožila sa e^(-3*(-0.3242))
(p7/(1-p7)) * exp(3*0.3242)
#5
primjer_modified = mtcars[7,]
primjer_modified$mpg = primjer_modified$mpg - 3
p7_modified = predict(m1, primjer_modified, type="response")
p7_modified
p7_modified/(1-p7_modified)
#6
m2 = glm(am ~ wt, data = mtcars, family = binomial())
summary(m2)
anova(m1, m2, test="LRT")
#7
m3 = glm(am ~ mpg, data = mtcars, family = binomial())
summary(m3)
anova(m1, m3, test = "LRT")
#
summary(mtcars)
# Ucitavanje podataka
pod = scan("C:\\Users\\Ivica\\Documents\\FER\\6. semestar\\SAP\\4vjezba\\vrpce.dat")
N = length(pod)
# Kreiranje pripadnog faktora
premaz = factor(rep(c('A', 'B', 'C', 'D'), c(5,4,7,6)))
k = length(levels (premaz))
# Graficki prikaz podataka
boxplot(pod ~ premaz)
# Testiranje homogenosti varijance uzoraka Bartletovim testom
bartlett.test(pod, premaz)
# Provodjenje analize varijance bez poziva funkcije 'anova'
mu_i = tapply(pod, INDEX = premaz, FUN = mean)
n_i = tapply(pod, INDEX = premaz, FUN = length)
var_i = tapply(pod, INDEX = premaz, FUN = var)
mu = mean(pod)
SSA = sum(n_i * (mu_i - mu)^2)
SSE = sum((n_i -1 ) * var_i)
MSA = SSA / (k-1)
MSE = SSE / (N-k)
f = MSA/ MSE
pv = 1 - pf(f, k - 1, N - k)
# Provjera dobivenih rezultata naredbom anova
model = lm(pod ~ premaz)
anova(model)
virginia_pod = scan("C:\\Users\\Ivica\\Documents\\FER\\6. semestar\\SAP\\4vjezba\\Virginia_Tech.txt")
virginia_pod
summary(virginia_pod)
# Ucitavanje podataka
pod = scan("C:\\Users\\Ivica\\Documents\\FER\\6. semestar\\SAP\\4vjezba\\gorivo.dat")
# Kreiranje faktora razred
razred = factor(rep(1:5, rep(9,5)))
# Kreiranje faktora marka
marka = factor(rep(rep(c('A', 'B', 'C'), c(3,3,3)), 5))
# Graficki prikaz podataka
boxplot(pod ~ razred)
boxplot(pod ~ marka)
# Provjera jednakosti varijanci
# Graficki prikaz interakcija faktora
summary(mtcars)
summary(mtcars$vs)
plot(mtcars$vs)
hist(mtcars$vs)
knitr::opts_chunk$set(echo = TRUE)
require(languageR, quietly = TRUE)
data(english)
#summary(english)
summary(english$AgeSubject)
plot(english$WordCategory)
#head(english)
young = english[english$AgeSubject == "young", ] # mladi
old = english[english$AgeSubject == "old", ] # stari
# vrijeme potrebno mlađima za rješavanje prvog zadatka
RTlexdec_young = young[, "RTlexdec"]
# vrijeme potrebno starijima za rješavanje prvog zadatka
RTlexdec_old = old[, "RTlexdec"]
# vrijeme potrebno mlađima za rješavanje drugog zadatka
RTnaming_young = young[, "RTnaming"]
# vrijeme potrebno starijima za rješavanje drugog zadatka
RTnaming_old = old[, "RTnaming"]
plot(RTlexdec_young, col = 'blue',
ylim = c(min(english$RTlexdec), max(english$RTlexdec)),
ylab = "Vrijeme za prvi zadatak")
points(RTlexdec_old, col='red')
plot(RTnaming_young, col = 'blue',
ylim = c(min(english$RTnaming), max(english$RTnaming)),
ylab = "Vrijeme za drugi zadatak")
points(RTnaming_old, col='red')
# testiranje jednakosti varijance prije t-testa
var.test(RTlexdec_young, RTlexdec_old)
t.test(RTlexdec_young, RTlexdec_old, alt = "two.sided", var.equal = TRUE)
cor(english$Familiarity, english$WrittenFrequency)
plot(english$Familiarity, english$WrittenFrequency)
firstVowel = english[english$CV == "V",] #riječi koje počinju sa samoglasnikom
firstConsonant = english[english$CV == "C",] # riječi koje počinju sa suglasnikom
mean(firstConsonant$Familiarity)
mean(firstVowel$Familiarity)
hist(firstConsonant$Familiarity)
hist(firstVowel$Familiarity)
# prije testiranja t-testom trebamo zaključiti jesu li varijance jednake u oba slučaja
var.test(firstConsonant$Familiarity, firstVowel$Familiarity)
t.test(firstVowel$Familiarity, firstConsonant$Familiarity, alt = "two.sided", var.equal = TRUE)
require(BSDA, quietly = TRUE)
verb_familiarity = english[english$WordCategory == "V", ]$Familiarity
noun_familiarity = english[english$WordCategory == "N", ]$Familiarity
verb_sd = sd(english[english$WordCategory == "V", ]$Familiarity)
noun_sd = sd(english[english$WordCategory == "N", ]$Familiarity)
z.test(verb_familiarity, y = noun_familiarity, alternative = "greater", sigma.x = verb_sd, sigma.y = noun_sd)
z.test(noun_familiarity, y = verb_familiarity, alternative = "greater", sigma.x = noun_sd, sigma.y = verb_sd)
chisq.test(english$WrittenFrequency, english$LengthInLetters, simulate.p.value = TRUE)
model1 = glm(WordCategory ~ RTlexdec + RTnaming, data = english, family = binomial())
summary(model1)
model2 = glm(WordCategory ~ RTlexdec, data = english, family = binomial())
summary(model2)
anova(model1, model2, test= "LRT")
model3 = glm(WordCategory ~ RTnaming, data = english, family = binomial())
summary(model3)
anova(model1, model3, test = "LRT")
test1 = english[5,]
p1 = predict(model1, test1, type = "response")
p2 = predict(model2, test1, type = "response")
p3 = predict(model3, test1, type = "response")
test2 = english[3055,]
p4 = predict(model1, test2, type = "response")
p5 = predict(model2, test2, type = "response")
p6 = predict(model3, test2, type = "response")
odds1 = p1/(1-p1)
odds2 = p4/(1-p4)
hist(english$WordCategory)
plot(english$WordCategory)
test1 = english[5,]
p1 = predict(model1, test1, type = "response")
p2 = predict(model2, test1, type = "response")
p3 = predict(model3, test1, type = "response")
test2 = english[3055,]
p4 = predict(model1, test2, type = "response")
p5 = predict(model2, test2, type = "response")
p6 = predict(model3, test2, type = "response")
odds1 = p1/(1-p1)
odds2 = p4/(1-p4)
help("glm")
test1 = english[5,]
p1 = predict(model1, test1, type = "response")
p2 = predict(model2, test1, type = "response")
p3 = predict(model3, test1, type = "response")
test2 = english[3055,]
p4 = predict(model1, test2, type = "response")
p5 = predict(model2, test2, type = "response")
p6 = predict(model3, test2, type = "response")
odds1 = p1/(1-p1)
odds2 = p4/(1-p4)
t.test(RTlexdec_young, RTlexdec_old, alt = "two.sided", var.equal = FALSE)
knitr::opts_chunk$set(echo = TRUE)
require(languageR, quietly = TRUE)
data(english)
#summary(english)
summary(english$AgeSubject)
plot(english$WordCategory)
#head(english)
young = english[english$AgeSubject == "young", ] # mladi
old = english[english$AgeSubject == "old", ] # stari
# vrijeme potrebno mlađima za rješavanje prvog zadatka
RTlexdec_young = young[, "RTlexdec"]
# vrijeme potrebno starijima za rješavanje prvog zadatka
RTlexdec_old = old[, "RTlexdec"]
# vrijeme potrebno mlađima za rješavanje drugog zadatka
RTnaming_young = young[, "RTnaming"]
# vrijeme potrebno starijima za rješavanje drugog zadatka
RTnaming_old = old[, "RTnaming"]
plot(RTlexdec_young, col = 'blue',
ylim = c(min(english$RTlexdec), max(english$RTlexdec)),
ylab = "Vrijeme za prvi zadatak")
points(RTlexdec_old, col='red')
plot(RTnaming_young, col = 'blue',
ylim = c(min(english$RTnaming), max(english$RTnaming)),
ylab = "Vrijeme za drugi zadatak")
points(RTnaming_old, col='red')
# testiranje jednakosti varijance prije t-testa
var.test(RTlexdec_young, RTlexdec_old)
t.test(RTlexdec_young, RTlexdec_old, alt = "two.sided", var.equal = FALSE)
cor(english$Familiarity, english$WrittenFrequency)
plot(english$Familiarity, english$WrittenFrequency)
firstVowel = english[english$CV == "V",] #riječi koje počinju sa samoglasnikom
firstConsonant = english[english$CV == "C",] # riječi koje počinju sa suglasnikom
mean(firstConsonant$Familiarity)
mean(firstVowel$Familiarity)
hist(firstConsonant$Familiarity)
hist(firstVowel$Familiarity)
# prije testiranja t-testom trebamo zaključiti jesu li varijance jednake u oba slučaja
var.test(firstConsonant$Familiarity, firstVowel$Familiarity)
t.test(firstVowel$Familiarity, firstConsonant$Familiarity, alt = "two.sided", var.equal = TRUE)
require(BSDA, quietly = TRUE)
verb_familiarity = english[english$WordCategory == "V", ]$Familiarity
noun_familiarity = english[english$WordCategory == "N", ]$Familiarity
verb_sd = sd(english[english$WordCategory == "V", ]$Familiarity)
noun_sd = sd(english[english$WordCategory == "N", ]$Familiarity)
z.test(verb_familiarity, y = noun_familiarity, alternative = "greater", sigma.x = verb_sd, sigma.y = noun_sd)
z.test(noun_familiarity, y = verb_familiarity, alternative = "greater", sigma.x = noun_sd, sigma.y = verb_sd)
chisq.test(english$WrittenFrequency, english$LengthInLetters, simulate.p.value = TRUE)
model1 = glm(WordCategory ~ RTlexdec + RTnaming, data = english, family = binomial())
summary(model1)
model2 = glm(WordCategory ~ RTlexdec, data = english, family = binomial())
summary(model2)
anova(model1, model2, test= "LRT")
model3 = glm(WordCategory ~ RTnaming, data = english, family = binomial())
summary(model3)
anova(model1, model3, test = "LRT")
test1 = english[5,]
p1 = predict(model1, test1, type = "response")
p2 = predict(model2, test1, type = "response")
p3 = predict(model3, test1, type = "response")
test2 = english[3055,]
p4 = predict(model1, test2, type = "response")
p5 = predict(model2, test2, type = "response")
p6 = predict(model3, test2, type = "response")
odds1 = p1/(1-p1)
odds2 = p4/(1-p4)
